{"ast":null,"code":"var _jsxFileName = \"/Users/carson/Downloads/react-lxufmk/src/index.js\";\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// Importing route components\nimport Root from './routes/root';\nimport Index from './routes/index';\nimport DetailPage from './routes/details';\nimport './css/index.css';\n\n/*\nITP 404, Midterm\nAuthor: Carson Wang\nEmail: carsonw@usc.edu\nCreate router, loader for react-router-dom\n*/\n\n// Create the router with route configurations\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = createBrowserRouter([{\n  path: '/',\n  element: /*#__PURE__*/_jsxDEV(Root, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 14\n  }, this),\n  children: [{\n    path: '/',\n    element: /*#__PURE__*/_jsxDEV(Index, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 18\n    }, this),\n    loader() {\n      return fetch(\"http://localhost:3000/resorts\").then(response => {\n        // Check if the response is successful\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      }).then(json => {\n        // Assuming the data is directly in the JSON and not in a `data` property\n        return json;\n      }).catch(error => {\n        console.error('There has been a problem with your fetch operation:', error);\n        // Return null or an appropriate fallback value if there's an error\n        return null;\n      });\n    }\n  }, {\n    path: '/leafside-meals/:Resort',\n    element: /*#__PURE__*/_jsxDEV(DetailPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 18\n    }, this),\n    loader(_ref) {\n      let {\n        params\n      } = _ref;\n      return fetch('http://localhost:3000/resorts').then(response => {\n        if (!response.ok) {\n          throw new Error(\"Network error: \".concat(response.error));\n        }\n        return response.json();\n      }).then(resorts => {\n        // Filtering meals to find the one that matches the slug\n        const matchedResort = resorts.filter(resort => resort.Resort === params.Resort);\n        if (matchedResort.length === 0) {\n          throw new Error(\"No meal found with slug: \".concat(params.Resort));\n        }\n        return matchedResort[0];\n      });\n    }\n  }]\n}]);\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 80,\n  columnNumber: 3\n}, this));","map":{"version":3,"names":["createBrowserRouter","RouterProvider","React","ReactDOM","Root","Index","DetailPage","jsxDEV","_jsxDEV","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","children","loader","fetch","then","response","ok","Error","json","catch","error","console","_ref","params","concat","resorts","matchedResort","filter","resort","Resort","length","root","createRoot","document","getElementById","render","StrictMode"],"sources":["/Users/carson/Downloads/react-lxufmk/src/index.js"],"sourcesContent":["import { createBrowserRouter, RouterProvider } from 'react-router-dom';\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// Importing route components\nimport Root from './routes/root';\nimport Index from './routes/index';\nimport DetailPage from './routes/details';\n\nimport './css/index.css';\n\n/*\nITP 404, Midterm\nAuthor: Carson Wang\nEmail: carsonw@usc.edu\nCreate router, loader for react-router-dom\n*/\n\n// Create the router with route configurations\nconst router = createBrowserRouter([\n  {\n    path: '/',\n    element: <Root />,\n    children: [\n      {\n        path: '/',\n        element: <Index />,\n        loader() {\n          return fetch(\"http://localhost:3000/resorts\")\n            .then((response) => {\n              // Check if the response is successful\n              if (!response.ok) {\n                throw new Error('Network response was not ok');\n              }\n              return response.json();\n            })\n            .then((json) => {\n              // Assuming the data is directly in the JSON and not in a `data` property\n              return json;\n            })\n            .catch((error) => {\n              console.error('There has been a problem with your fetch operation:', error);\n              // Return null or an appropriate fallback value if there's an error\n              return null;\n            });\n        }\n      },\n      {\n        path: '/leafside-meals/:Resort',\n        element: <DetailPage />,\n        loader({ params }) {\n          return fetch('http://localhost:3000/resorts')\n            .then((response) => {\n              if (!response.ok) {\n                throw new Error(`Network error: ${response.error}`);\n              }\n              return response.json();\n            })\n            .then((resorts) => {\n              // Filtering meals to find the one that matches the slug\n              const matchedResort = resorts.filter(\n                (resort) => resort.Resort === params.Resort\n              );\n\n              if (matchedResort.length === 0) {\n                throw new Error(`No meal found with slug: ${params.Resort}`);\n              }\n\n              return matchedResort[0];\n            });\n        }\n      },\n    ]\n  }\n]);\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <RouterProvider router={router} />\n  </React.StrictMode>\n);\n"],"mappings":";AAAA,SAASA,mBAAmB,EAAEC,cAAc,QAAQ,kBAAkB;AACtE,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,kCAAkC;;AAEzC;AACA,OAAOC,IAAI,MAAM,eAAe;AAChC,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAOC,UAAU,MAAM,kBAAkB;AAEzC,OAAO,iBAAiB;;AAExB;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAGT,mBAAmB,CAAC,CACjC;EACEU,IAAI,EAAE,GAAG;EACTC,OAAO,eAAEH,OAAA,CAACJ,IAAI;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EACjBC,QAAQ,EAAE,CACR;IACEN,IAAI,EAAE,GAAG;IACTC,OAAO,eAAEH,OAAA,CAACH,KAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IAClBE,MAAMA,CAAA,EAAG;MACP,OAAOC,KAAK,CAAC,+BAA+B,CAAC,CAC1CC,IAAI,CAAEC,QAAQ,IAAK;QAClB;QACA,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACxB,CAAC,CAAC,CACDJ,IAAI,CAAEI,IAAI,IAAK;QACd;QACA,OAAOA,IAAI;MACb,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,qDAAqD,EAAEA,KAAK,CAAC;QAC3E;QACA,OAAO,IAAI;MACb,CAAC,CAAC;IACN;EACF,CAAC,EACD;IACEf,IAAI,EAAE,yBAAyB;IAC/BC,OAAO,eAAEH,OAAA,CAACF,UAAU;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IACvBE,MAAMA,CAAAU,IAAA,EAAa;MAAA,IAAZ;QAAEC;MAAO,CAAC,GAAAD,IAAA;MACf,OAAOT,KAAK,CAAC,+BAA+B,CAAC,CAC1CC,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,mBAAAO,MAAA,CAAmBT,QAAQ,CAACK,KAAK,CAAE,CAAC;QACrD;QACA,OAAOL,QAAQ,CAACG,IAAI,CAAC,CAAC;MACxB,CAAC,CAAC,CACDJ,IAAI,CAAEW,OAAO,IAAK;QACjB;QACA,MAAMC,aAAa,GAAGD,OAAO,CAACE,MAAM,CACjCC,MAAM,IAAKA,MAAM,CAACC,MAAM,KAAKN,MAAM,CAACM,MACvC,CAAC;QAED,IAAIH,aAAa,CAACI,MAAM,KAAK,CAAC,EAAE;UAC9B,MAAM,IAAIb,KAAK,6BAAAO,MAAA,CAA6BD,MAAM,CAACM,MAAM,CAAE,CAAC;QAC9D;QAEA,OAAOH,aAAa,CAAC,CAAC,CAAC;MACzB,CAAC,CAAC;IACN;EACF,CAAC;AAEL,CAAC,CACF,CAAC;AAEF,MAAMK,IAAI,GAAGjC,QAAQ,CAACkC,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACThC,OAAA,CAACN,KAAK,CAACuC,UAAU;EAAAzB,QAAA,eACfR,OAAA,CAACP,cAAc;IAACQ,MAAM,EAAEA;EAAO;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAClB,CACpB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}