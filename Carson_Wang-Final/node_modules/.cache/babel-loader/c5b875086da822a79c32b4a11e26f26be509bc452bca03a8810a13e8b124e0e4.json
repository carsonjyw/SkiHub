{"ast":null,"code":"var _jsxFileName = \"/Users/carson/Downloads/react-lxufmk/src/routes/admin.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AdminPage() {\n  _s();\n  const resortList = useLoaderData();\n  const [savedResorts, setSavedResorts] = useState(resortList);\n  const [selectedResorts, setSelectedResorts] = useState(new Set());\n  const selectAllRef = useRef();\n  useEffect(() => {\n    if (selectAllRef.current) {\n      selectAllRef.current.indeterminate = selectedResorts.size > 0 && selectedResorts.size < savedResorts.length;\n    }\n  }, [selectedResorts, savedResorts]);\n  const handleSelectAll = e => {\n    setSelectedResorts(e.target.checked ? new Set(savedResorts.map(resort => resort.id)) : new Set());\n  };\n  const handleSelectResort = id => {\n    const newSelectedResorts = new Set(selectedResorts);\n    if (newSelectedResorts.has(id)) {\n      newSelectedResorts.delete(id);\n    } else {\n      newSelectedResorts.add(id);\n    }\n    setSelectedResorts(newSelectedResorts);\n  };\n  const handleBulkDelete = () => {\n    Promise.all(Array.from(selectedResorts).map(id => fetch(\"http://localhost:3000/saved/\".concat(id), {\n      method: 'DELETE'\n    }))).then(() => {\n      // Update the list by filtering out the deleted items\n      setSavedResorts(savedResorts.filter(resort => !selectedResorts.has(resort.id)));\n      setSelectedResorts(new Set());\n      // Display a notification here\n      console.log('Deleted successfully');\n    }).catch(error => console.error('Error:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Saved Resorts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      ref: selectAllRef,\n      onChange: handleSelectAll,\n      checked: selectedResorts.size === savedResorts.length && savedResorts.length > 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Select All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), savedResorts.map(resort => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: selectedResorts.has(resort.id),\n        onChange: () => handleSelectResort(resort.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), resort.Resort, \" - \", /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/resort-details/\".concat(resort.Resort),\n        children: \"Detail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 39\n      }, this)]\n    }, resort.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this)), selectedResorts.size > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBulkDelete,\n      children: \"Delete Selected\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_s(AdminPage, \"pSglOIPgI6ulvBu0q/DgXNgk8lA=\", true);\n_c = AdminPage;\n;\nvar _c;\n$RefreshReg$(_c, \"AdminPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Link","jsxDEV","_jsxDEV","AdminPage","_s","resortList","useLoaderData","savedResorts","setSavedResorts","selectedResorts","setSelectedResorts","Set","selectAllRef","current","indeterminate","size","length","handleSelectAll","e","target","checked","map","resort","id","handleSelectResort","newSelectedResorts","has","delete","add","handleBulkDelete","Promise","all","Array","from","fetch","concat","method","then","filter","console","log","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","ref","onChange","Resort","to","onClick","_c","$RefreshReg$"],"sources":["/Users/carson/Downloads/react-lxufmk/src/routes/admin.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function AdminPage() {\n    const resortList = useLoaderData();\n    const [savedResorts, setSavedResorts] = useState(resortList);\n    const [selectedResorts, setSelectedResorts] = useState(new Set());\n    const selectAllRef = useRef();\n\n    useEffect(() => {\n        if (selectAllRef.current) {\n            selectAllRef.current.indeterminate =\n                selectedResorts.size > 0 && selectedResorts.size < savedResorts.length;\n        }\n    }, [selectedResorts, savedResorts]);\n\n    const handleSelectAll = (e) => {\n        setSelectedResorts(\n            e.target.checked ? new Set(savedResorts.map(resort => resort.id)) : new Set()\n        );\n    };\n\n    const handleSelectResort = (id) => {\n        const newSelectedResorts = new Set(selectedResorts);\n        if (newSelectedResorts.has(id)) {\n            newSelectedResorts.delete(id);\n        } else {\n            newSelectedResorts.add(id);\n        }\n        setSelectedResorts(newSelectedResorts);\n    };\n\n    const handleBulkDelete = () => {\n        Promise.all(Array.from(selectedResorts).map(id =>\n            fetch(`http://localhost:3000/saved/${id}`, { method: 'DELETE' })\n        ))\n            .then(() => {\n                // Update the list by filtering out the deleted items\n                setSavedResorts(savedResorts.filter(resort => !selectedResorts.has(resort.id)));\n                setSelectedResorts(new Set());\n                // Display a notification here\n                console.log('Deleted successfully');\n            })\n            .catch(error => console.error('Error:', error));\n    };\n\n    return (\n        <div>\n            <h1>Saved Resorts</h1>\n            <input\n                type=\"checkbox\"\n                ref={selectAllRef}\n                onChange={handleSelectAll}\n                checked={selectedResorts.size === savedResorts.length && savedResorts.length > 0}\n            />\n            <label>Select All</label>\n            {savedResorts.map(resort => (\n                <div key={resort.id}>\n                    <input\n                        type=\"checkbox\"\n                        checked={selectedResorts.has(resort.id)}\n                        onChange={() => handleSelectResort(resort.id)}\n                    />\n                    {resort.Resort} - <Link to={`/resort-details/${resort.Resort}`}>Detail</Link>\n                </div>\n            ))}\n            {selectedResorts.size > 0 && (\n                <button onClick={handleBulkDelete}>Delete Selected</button>\n            )}\n        </div>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}