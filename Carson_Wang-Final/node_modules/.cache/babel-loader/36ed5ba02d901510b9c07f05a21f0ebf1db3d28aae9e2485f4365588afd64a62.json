{"ast":null,"code":"var _jsxFileName = \"/Users/carson/Downloads/react-lxufmk/src/routes/save.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Saved(_ref) {\n  _s();\n  let {\n    resortName\n  } = _ref;\n  const [resort, setResort] = useState(null);\n  const [isSaved, setIsSaved] = useState(false);\n  useEffect(() => {\n    // Fetch the resort details\n    fetch(\"http://localhost:3000/resorts?Resort=\".concat(encodeURIComponent(resortName))).then(response => response.json()).then(data => {\n      if (data.length > 0) {\n        setResort(data[0]);\n      }\n    }).catch(error => console.error('Error:', error));\n\n    // Check if the resort is already saved\n    fetch(\"http://localhost:3000/saved?resortName=\".concat(encodeURIComponent(resortName))).then(response => response.json()).then(data => setIsSaved(data.length > 0)).catch(error => console.error('Error:', error));\n  }, [resortName]);\n  const handleSave = () => {\n    if (isSaved) {\n      // Fetch the specific saved item ID first\n      fetch(\"http://localhost:3000/saved?resortName=\".concat(encodeURIComponent(resortName))).then(response => response.json()).then(savedItems => {\n        if (savedItems.length > 0) {\n          return fetch(\"http://localhost:3000/saved/\".concat(savedItems[0].id), {\n            method: 'DELETE'\n          });\n        }\n        throw new Error('Item not found for deletion.');\n      }).then(() => setIsSaved(false)).catch(error => console.error('Error:', error));\n    } else {\n      // Save the resort\n      fetch('http://localhost:3000/saved', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          resortName,\n          ...resort\n        })\n      }).then(() => setIsSaved(true)).catch(error => console.error('Error:', error));\n    }\n  };\n  if (!resort) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: resortName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSave,\n      children: isSaved ? 'Unsave' : 'Save'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n_s(Saved, \"LyMlU7Z9A7M0yQf5XutdUfABy4c=\");\n_c = Saved;\n;\nvar _c;\n$RefreshReg$(_c, \"Saved\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Saved","_ref","_s","resortName","resort","setResort","isSaved","setIsSaved","fetch","concat","encodeURIComponent","then","response","json","data","length","catch","error","console","handleSave","savedItems","id","method","Error","headers","body","JSON","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/carson/Downloads/react-lxufmk/src/routes/save.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nexport default function Saved({ resortName }) {\n    const [resort, setResort] = useState(null);\n    const [isSaved, setIsSaved] = useState(false);\n\n    useEffect(() => {\n        // Fetch the resort details\n        fetch(`http://localhost:3000/resorts?Resort=${encodeURIComponent(resortName)}`)\n            .then(response => response.json())\n            .then(data => {\n                if (data.length > 0) {\n                    setResort(data[0]);\n                }\n            })\n            .catch(error => console.error('Error:', error));\n\n        // Check if the resort is already saved\n        fetch(`http://localhost:3000/saved?resortName=${encodeURIComponent(resortName)}`)\n            .then(response => response.json())\n            .then(data => setIsSaved(data.length > 0))\n            .catch(error => console.error('Error:', error));\n    }, [resortName]);\n\n    const handleSave = () => {\n        if (isSaved) {\n            // Fetch the specific saved item ID first\n            fetch(`http://localhost:3000/saved?resortName=${encodeURIComponent(resortName)}`)\n                .then(response => response.json())\n                .then(savedItems => {\n                    if (savedItems.length > 0) {\n                        return fetch(`http://localhost:3000/saved/${savedItems[0].id}`, { method: 'DELETE' });\n                    }\n                    throw new Error('Item not found for deletion.');\n                })\n                .then(() => setIsSaved(false))\n                .catch(error => console.error('Error:', error));\n        } else {\n            // Save the resort\n            fetch('http://localhost:3000/saved', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ resortName, ...resort })\n            })\n                .then(() => setIsSaved(true))\n                .catch(error => console.error('Error:', error));\n        }\n    };\n\n    if (!resort) return <p>Loading...</p>;\n\n    return (\n        <div>\n            <h1>{resortName}</h1>\n            {/* Display resort details here */}\n            <button onClick={handleSave}>\n                {isSaved ? 'Unsave' : 'Save'}\n            </button>\n        </div>\n    );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}