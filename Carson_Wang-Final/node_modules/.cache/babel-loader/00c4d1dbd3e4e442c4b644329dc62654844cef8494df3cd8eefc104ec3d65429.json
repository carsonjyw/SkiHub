{"ast":null,"code":"var _jsxFileName = \"/Users/carson/Downloads/react-lxufmk/src/routes/comment.js\";\nimport { render, fireEvent } from '@testing-library/react';\nimport Comment from './Comment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ntest('renders input fields for comment submission', () => {\n  // Arrange & Act\n  const {\n    getByTestId\n  } = render( /*#__PURE__*/_jsxDEV(Comment, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 34\n  }, this));\n\n  // Assert\n  expect(getByTestId('Name')).toBeInTheDocument();\n  expect(getByTestId('Rating')).toBeInTheDocument();\n  expect(getByTestId('Trip-Notes')).toBeInTheDocument();\n  expect(getByTestId('Submit-Review')).toBeInTheDocument();\n});\ntest('handles input changes', () => {\n  // Arrange\n  const {\n    getByTestId\n  } = render( /*#__PURE__*/_jsxDEV(Comment, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 34\n  }, this));\n\n  // Act & Assert - Name input\n  const nameInput = getByTestId('Name');\n  fireEvent.change(nameInput, {\n    target: {\n      value: 'John Doe'\n    }\n  });\n  expect(nameInput.value).toBe('John Doe');\n\n  // Act & Assert - Rating input\n  const ratingInput = getByTestId('Rating');\n  fireEvent.change(ratingInput, {\n    target: {\n      value: '4'\n    }\n  });\n  expect(ratingInput.value).toBe('4');\n\n  // Act & Assert - Comment textarea\n  const commentTextarea = getByTestId('Trip-Notes');\n  fireEvent.change(commentTextarea, {\n    target: {\n      value: 'Great trip!'\n    }\n  });\n  expect(commentTextarea.value).toBe('Great trip!');\n});\ntest('submits the form', () => {\n  // Mock the handleSubmit function if it's not already mocked in your component\n  const handleSubmit = jest.fn(e => e.preventDefault());\n\n  // Arrange\n  const {\n    getByTestId\n  } = render( /*#__PURE__*/_jsxDEV(Comment, {\n    handleSubmit: handleSubmit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 34\n  }, this));\n\n  // Act - Fill in and submit the form\n  fireEvent.change(getByTestId('Name'), {\n    target: {\n      value: 'John Doe'\n    }\n  });\n  fireEvent.change(getByTestId('Rating'), {\n    target: {\n      value: '4'\n    }\n  });\n  fireEvent.change(getByTestId('Trip-Notes'), {\n    target: {\n      value: 'Great trip!'\n    }\n  });\n  fireEvent.click(getByTestId('Submit-Review'));\n\n  // Assert\n  expect(handleSubmit).toHaveBeenCalled();\n});","map":{"version":3,"names":["render","fireEvent","Comment","jsxDEV","_jsxDEV","test","getByTestId","fileName","_jsxFileName","lineNumber","columnNumber","expect","toBeInTheDocument","nameInput","change","target","value","toBe","ratingInput","commentTextarea","handleSubmit","jest","fn","e","preventDefault","click","toHaveBeenCalled"],"sources":["/Users/carson/Downloads/react-lxufmk/src/routes/comment.js"],"sourcesContent":["import { render, fireEvent } from '@testing-library/react';\nimport Comment from './Comment';\n\ntest('renders input fields for comment submission', () => {\n  // Arrange & Act\n  const { getByTestId } = render(<Comment />);\n\n  // Assert\n  expect(getByTestId('Name')).toBeInTheDocument();\n  expect(getByTestId('Rating')).toBeInTheDocument();\n  expect(getByTestId('Trip-Notes')).toBeInTheDocument();\n  expect(getByTestId('Submit-Review')).toBeInTheDocument();\n});\n\ntest('handles input changes', () => {\n  // Arrange\n  const { getByTestId } = render(<Comment />);\n\n  // Act & Assert - Name input\n  const nameInput = getByTestId('Name');\n  fireEvent.change(nameInput, { target: { value: 'John Doe' } });\n  expect(nameInput.value).toBe('John Doe');\n\n  // Act & Assert - Rating input\n  const ratingInput = getByTestId('Rating');\n  fireEvent.change(ratingInput, { target: { value: '4' } });\n  expect(ratingInput.value).toBe('4');\n\n  // Act & Assert - Comment textarea\n  const commentTextarea = getByTestId('Trip-Notes');\n  fireEvent.change(commentTextarea, { target: { value: 'Great trip!' } });\n  expect(commentTextarea.value).toBe('Great trip!');\n});\n\ntest('submits the form', () => {\n  // Mock the handleSubmit function if it's not already mocked in your component\n  const handleSubmit = jest.fn(e => e.preventDefault());\n\n  // Arrange\n  const { getByTestId } = render(<Comment handleSubmit={handleSubmit} />);\n\n  // Act - Fill in and submit the form\n  fireEvent.change(getByTestId('Name'), { target: { value: 'John Doe' } });\n  fireEvent.change(getByTestId('Rating'), { target: { value: '4' } });\n  fireEvent.change(getByTestId('Trip-Notes'), { target: { value: 'Great trip!' } });\n  fireEvent.click(getByTestId('Submit-Review'));\n\n  // Assert\n  expect(handleSubmit).toHaveBeenCalled();\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}